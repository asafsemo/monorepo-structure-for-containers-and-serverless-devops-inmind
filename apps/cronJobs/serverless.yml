org: presentation
app: store-auth-api

service: backend-api-${self:custom.version}
custom: ${file(../../../packages/dev-config/serverless.common.yml):custom}

package:
    individually: false
    patterns: ${self:custom.patterns}

provider:
    iam:
        role: ${ssm:/store/iam/lambda_role_arn}
    name: aws
    deploymentMethod: direct
    runtime: nodejs18.x
    stage: ${opt:stage, 'dev'}
    versionFunctions: false
    logRetentionInDays: ${ssm:/store/logs/retention}
    region: eu-west-1
    timeout: 30 # optional, in seconds, default is 6
    # vpc:
    #     securityGroupIds:
    #         - ${ssm:/store/vpc/lambda_security_group_id}
    #     subnetIds:
    #         - ${ssm:/store/vpc/subnet_id_0}
    #         - ${ssm:/store/vpc/subnet_id_1}
    tracing:
        # apiGateway: true
        lambda: true
    apiGateway:
        restApiId: ${ssm:/store/api_gateway/website/restId}
        restApiRootResourceId: ${ssm:/store/api_gateway/website/root_resourceId/v1}
    environment:
        SERVICE_VERSION: ${self:custom.version}
        S3_DYAMICBUCKET_REGION: ${ssm:/store/s3/region}
        ENV: ${ssm:/store/environment}
        SITE_OPERATION_EMAIL: 'store@store.co.il'
    deploymentBucket:
        name: ${self:custom.deploymentBucket.name}

functions:
    runjob:
        handler: dist/lambda_controllers/template.awsLambdaHandler
        memorySize: 350
        events:
            - http:
                path: auth/login
                method: post

